'use client';

import { useEffect } from 'react';
import { cleanOldBDCData, getStorageStatus } from '../lib/storageUtils';

/**
 * Componente para inicializar o localStorage de forma segura
 * Executa limpeza autom√°tica quando necess√°rio
 */
export default function StorageInitializer() {
  useEffect(() => {
    const initializeStorage = async () => {
      try {
        // Verificar status do localStorage
        const status = getStorageStatus();
        
        if (!status.available) {
          console.warn('localStorage n√£o est√° dispon√≠vel');
          return;
        }
        
        console.log(`üìä localStorage: ${status.percentUsed}% usado (${(status.sizeUsed / 1024 / 1024).toFixed(2)}MB)`);
        
        // Se estiver muito cheio (>80%), fazer limpeza autom√°tica
        if (status.percentUsed > 80) {
          console.warn('localStorage muito cheio, executando limpeza autom√°tica...');
          cleanOldBDCData();
          
          // Verificar novamente ap√≥s limpeza
          const newStatus = getStorageStatus();
          console.log(`‚úÖ Limpeza conclu√≠da: ${newStatus.percentUsed}% usado`);
        }
        
        // Limpar dados espec√≠ficos problem√°ticos
        const problematicKeys = ['userAvatarPreview', 'large_data', 'cache_'];
        let cleanedCount = 0;
        
        problematicKeys.forEach(keyPattern => {
          try {
            // Remover chaves que correspondem ao padr√£o
            Object.keys(localStorage).forEach(key => {
              if (key.includes(keyPattern)) {
                const size = key.length + (localStorage.getItem(key) || '').length;
                if (size > 50000) { // > 50KB
                  localStorage.removeItem(key);
                  cleanedCount++;
                  console.log(`üßπ Removido item grande: ${key}`);
                }
              }
            });
          } catch (error) {
            console.warn(`Erro ao limpar chave ${keyPattern}:`, error);
          }
        });
        
        if (cleanedCount > 0) {
          console.log(`‚úÖ Limpeza adicional: ${cleanedCount} itens removidos`);
        }
        
      } catch (error) {
        console.error('Erro na inicializa√ß√£o do storage:', error);
      }
    };
    
    // Executar inicializa√ß√£o
    initializeStorage();
    
    // Configurar limpeza peri√≥dica (a cada 30 minutos)
    const cleanupInterval = setInterval(() => {
      const status = getStorageStatus();
      if (status.percentUsed > 90) {
        console.log('Executando limpeza peri√≥dica...');
        cleanOldBDCData();
      }
    }, 30 * 60 * 1000); // 30 minutos
    
    return () => {
      clearInterval(cleanupInterval);
    };
  }, []);
  
  // Este componente n√£o renderiza nada
  return null;
} 